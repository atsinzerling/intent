java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'fffds' for key 'items.SN'
having duplicat SN

java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '17' for key 'items.PRIMARY'

\\DESKTOP-E5VI6AD\application\Images



//            ImageView imgview = new ImageView("...");
//            imgview.setFitWidth(200);
//            imgview.setFitHeight(200);
//            try{
//                imgview.setImage(new Image(new FileInputStream(fl)));
//            } catch (FileNotFoundException ex) {
//                ex.printStackTrace();
//            }
//            StackPane imgWrap = new StackPane(imgview);
//            imgWrap.setMaxSize(200, 200);
//            imgWrap.setStyle("-fx-border-radius: 20; " +
//                "-fx-border-color: black;" +
//                "-fx-border-width: 5 ;");
//            vbox.getChildren().add(imgWrap);
//            VBox.setMargin(imgWrap, new Insets(10, 10, 10, 10));



CREATE TABLE `items` (
  `SKU` bigint NOT NULL,
  `SN` varchar(50) DEFAULT NULL,
  `PN` varchar(50) DEFAULT NULL,
  `UPC` varchar(50) DEFAULT NULL,
  `Grade` varchar(50) DEFAULT NULL,
  `Location` varchar(50) DEFAULT NULL,
  `Notes` varchar(500) DEFAULT NULL,
  `User` varchar(50) DEFAULT NULL,
  `DateTime` timestamp NULL DEFAULT NULL,
  `Images` varchar(200) DEFAULT NULL,
  `OtherRecords` varchar(1000) DEFAULT NULL,
  `DateModified` timestamp NULL DEFAULT NULL,
  `POnumber` varchar(50) DEFAULT NULL,
  `Specs` varchar(500) DEFAULT NULL,
  PRIMARY KEY (`SKU`),
  UNIQUE KEY `SKU` (`SKU`),
  UNIQUE KEY `SN` (`SN`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci


SN
PN
UPC
Grade
Location
POnumber
Specs

admin on 2022-05-30 15:38:52.38: updated UPC to "cccc", updated POnumber to "fg"<<<:::===admin on 2022-05-30 15:38:46.149: updated UPC to "cccccccccc"<<<:::===admin on 2022-05-30 15:38:33.83: updated Notes to "dd", updated Grade to "sdwdewd", updated Specs to "gddddd"<<<:::===admin on 2022-05-30 15:28:55.464: updated Notes to "gt4g", updated PN to "frg4", updated Specs to "g"<<<:::===



when adding new user, first try to add it into the database, then add to the arraylist and update
probably add button to refresh

Platform.runLater(() -> {
//            userLbl.setMinHeight(userTextF.getHeight());
        });


//        ArrayList<Item> outList = new ArrayList<>();
//
//
//        try {
//            Connection conn = DriverManager.getConnection(urll);
//            Statement stmt = conn.createStatement();
////            int row_count = stmt.executeQuery("SELECT COUNT(*) from items").getInt(1);
//            ResultSet rs = stmt.executeQuery(query);
////            out = new Item[row_count];
////            rs.next();
//
//
//            while (rs.next()) {
////                System.out.println(rs.getInt(1) +  "\t" +
////                    rs.getString(2) + "\t" +
////                    rs.getString(3) + "\t" +
////                    rs.getString(4) + "\t" +
////                    rs.getString(5) + "\t" +
////                    rs.getString(6) + "\t" +
////                    rs.getString(7) + "\t" +
////                    rs.getString(8) + "\t" +
////                    rs.getTimestamp(9) + "\t" +
////                    rs.getString(10) + "\t" +
////                    rs.getString(11) + "\t"
////                );
////                if (rs.getTimestamp(9) != null){
////                    System.out.println(rs.getTimestamp(9).getClass());
////                }
//                outList.add(new Item(
//                    rs.getInt(1),
//                    rs.getString(2),
//                    rs.getString(3),
//                    rs.getString(4),
//                    rs.getString(5),
//                    rs.getString(6),
//                    rs.getString(7),
//                    rs.getString(8),
//                    rs.getTimestamp(9),
//                    rs.getString(10),
//                    rs.getString(11)
//                ));
////                rs.next();
//                conn.close();
//            }
//        } catch (SQLException e) {
//            System.out.println(e.getMessage());
//        }
//        Item[] out = outList.toArray(new Item[outList.size()]);



//    public static Item[] readJson(){
//        JSONParser jsonParser = new JSONParser();
//
//        FileReader reader = null;
//        try {
//            reader = new FileReader("src/items.json");
//        } catch (FileNotFoundException e) {
//            e.printStackTrace();
//        }
//
//        Object obj = null;
//        try {
//            obj = jsonParser.parse(reader);
//        } catch (IOException e) {
//            e.printStackTrace();
//        } catch (ParseException e) {
//            e.printStackTrace();
//        }
//
//        JSONArray arr = (JSONArray) obj;
//        System.out.println(arr);
//        Item[] out = new Item[arr.size()];
//        int coun = 0;
//        for (Object elm: arr){
//            JSONObject ell = (JSONObject) elm;
//            out[coun] = new Item((int)ell.get("SKU"),(String)ell.get("SN"),(String)ell.get("PN"),(String)ell.get("UPC"),true,null);
//            coun++;
//        }
//        return out;
//    }

//    public static boolean writeToJson(Item[] arr){
//        JSONArray jsonArr = new JSONArray();
//        for (Item ite: arr){
//            JSONObject jsonItem = new JSONObject();
//            jsonItem.put("SKU", ite.SKU);
//            jsonItem.put("SN", ite.SN);
//            jsonItem.put("PN", ite.PN);
//            jsonItem.put("UPC", ite.UPC);
//            jsonItem.put("isPerfect", ite.isPerfect);
//
//            JSONArray jsonImages = new JSONArray();
//            if (ite.images != null){
//                for (String img : ite.images) {
//                    jsonImages.add(img);
//                }
//            }
//            jsonItem.put("images", jsonImages);
//
//
//
//            jsonArr.add(jsonItem);
//        }
//        try (FileWriter file = new FileWriter("src/items.json")) {
//            //We can write any JSONArray or JSONObject instance to the file
////            String st = jsonArr.toString(4);
//            String stt = (new ObjectMapper()).writerWithDefaultPrettyPrinter().writeValueAsString(jsonArr);
//            file.write(stt);
//            System.out.println(stt);
//            file.flush();
//
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//
//        return true;
//    }



//            Item[] oldArr = MainPage.readJson();
//            Item[] newArr = new Item[oldArr.length+1];
//            new Item(
//                Integer.parseInt(SKUFieled.getText()),
//                SNFieled.getText(),
//                PNFieled.getText(),
//                UPCFieled.getText(),
//                "","","","",null,"",""
//            );
//            for (int i = 0; i < oldArr.length; i++){
//                newArr[i+1] = oldArr[i];
//            }
//            MainPage.writeToJson(newArr);


//            MainPage.table.refresh();




//            ArrayList<Image> imagesFinal = new ArrayList<>();
//            Thread newThread = new Thread(() -> {
//                try {
//                    System.out.println("started loading images");
//
//
//
//                } catch (IOException ex) {
//                    ex.printStackTrace();
//                }
//            });
//            newThread.start();
//            try {
//                newThread.join();
//            } catch (InterruptedException e) {
//                e.printStackTrace();
//            }




                    //part before for not main functionality

//                        System.out.println("SELECT from items WHERE SKU=" + itemsSelect.get(0).SKU);
//                        ResultSet rss = stmt.executeQuery("SELECT * FROM items WHERE SKU=''");
//                        System.out.println(rss.isClosed());
//                        System.out.println((new Item(
//                            rss.getInt(1),
//                            rss.getString(2),
//                            rss.getString(3),
//                            rss.getString(4),
//                            rss.getString(5),
//                            rss.getString(6),
//                            rss.getString(7),
//                            rss.getString(8),
//                            rss.getTimestamp(9),
//                            rss.getString(10),
//                            rss.getString(11)
//                        )));



//                System.out.println(rs.getInt(1) +  "\t" +
//                    rs.getString(2) + "\t" +
//                    rs.getString(3) + "\t" +
//                    rs.getString(4) + "\t" +
//                    rs.getString(5) + "\t" +
//                    rs.getString(6) + "\t" +
//                    rs.getString(7) + "\t" +
//                    rs.getString(8) + "\t" +
//                    rs.getTimestamp(9) + "\t" +
//                    rs.getString(10) + "\t" +
//                    rs.getString(11) + "\t"
//                );
//                if (rs.getTimestamp(9) != null){
//                    System.out.println(rs.getTimestamp(9).getClass());
//                }


java --module-path "C:\Program Files\Eclipse Adoptium\libsss\javafx-sdk-11.0.2\lib" --add-modules=javafx.controls,javafx.media,javafx.fxml -jar intent.jar

java --module-path "C:\STUFF\prog\JAVA\intent\out\artifacts\intent_jar5\javafx-sdk-11.0.2\lib" --add-modules=javafx.controls,javafx.media,javafx.fxml -jar intent.jar

java --module-path "C:\STUFF\prog\JAVA\intent\out\artifacts\intent_jar5\javafx-sdk-11.0.2\lib" --add-modules=javafx.controls,javafx.media,javafx.fxml -jar D:\Download\intent_jar5\intent.jar

java -jar intent.jar

C:\Windows\System32\cmd.exe /k java --module-path "C:\Program Files\Intent Database 1.0.0\javafx-sdk-11.0.2\lib" --add-modules=javafx.controls,javafx.media,javafx.fxml -jar "C:\Program Files\Intent Database 1.0.0\intent.jar" & exit


+----------------------------------------------------------+
|+--------------------------------------------------------+|
||                                                        ||
||  Don't close this command-line window!                 ||
||  Closing it will exit the intent-database application  ||
||                                                        ||
|+--------------------------------------------------------+|
+----------------------------------------------------------+

+----------------------------------------------------------------+
| +------------------------------------------------------------+ |
| | +--------------------------------------------------------+ | |
| | |                                                        | | |
| | |  Don't close this command-line window!                 | | |
| | |  Closing it will exit the intent-database application  | | |
| | |                                                        | | |
| | +--------------------------------------------------------+ | |
| +------------------------------------------------------------+ |
+----------------------------------------------------------------+









=IMPORTXML("https://en.wikipedia.org/wiki/Moon_landing", "//title")


java.io.IOException: Zip bomb detected! The file would exceed the max. ratio of compressed file size to the size of the expanded data.
This may indicate that the file is used to inflate memory usage and thus could pose a security risk.
You can adjust this limit via ZipSecureFile.setMinInflateRatio() if you need to work with files which exceed this limit.
Uncompressed size: 104589, Raw/compressed size: 1041, ratio: 0.009953
Limits: MIN_INFLATE_RATIO: 0.010000, Entry: xl/styles.xml
	at org.apache.poi.openxml4j.util.ZipArchiveThresholdInputStream.checkThreshold(ZipArchiveThresholdInputStream.java:143)
	at org.apache.poi.openxml4j.util.ZipArchiveThresholdInputStream.read(ZipArchiveThresholdInputStream.java:82)
	at org.apache.poi.util.IOUtils.toByteArray(IOUtils.java:240)
	at org.apache.poi.util.IOUtils.toByteArray(IOUtils.java:203)
	at org.apache.poi.openxml4j.util.ZipArchiveFakeEntry.<init>(ZipArchiveFakeEntry.java:82)
	at org.apache.poi.openxml4j.util.ZipInputStreamZipEntrySource.<init>(ZipInputStreamZipEntrySource.java:98)
	at org.apache.poi.openxml4j.opc.ZipPackage.<init>(ZipPackage.java:132)
	at org.apache.poi.openxml4j.opc.OPCPackage.open(OPCPackage.java:312)
	at org.apache.poi.ooxml.util.PackageHelper.open(PackageHelper.java:59)
	at org.apache.poi.xssf.usermodel.XSSFWorkbook.<init>(XSSFWorkbook.java:289)
	at org.apache.poi.xssf.usermodel.XSSFWorkbook.<init>(XSSFWorkbook.java:285)
	at ImportPreviewWindow.lambda$importBtnAction$7(ImportPreviewWindow.java:240)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "Thread-5" java.lang.IllegalStateException: Not on FX application thread; currentThread = Thread-5
	at javafx.graphics/com.sun.javafx.tk.Toolkit.checkFxUserThread(Toolkit.java:291)
	at javafx.graphics/com.sun.javafx.tk.quantum.QuantumToolkit.checkFxUserThread(QuantumToolkit.java:424)
	at javafx.graphics/javafx.stage.Stage.<init>(Stage.java:254)
	at javafx.graphics/javafx.stage.Stage.<init>(Stage.java:240)
	at javafx.controls/javafx.scene.control.HeavyweightDialog$1.<init>(HeavyweightDialog.java:52)
	at javafx.controls/javafx.scene.control.HeavyweightDialog.<init>(HeavyweightDialog.java:52)
	at javafx.controls/javafx.scene.control.Dialog.<init>(Dialog.java:267)
	at javafx.controls/javafx.scene.control.Alert.<init>(Alert.java:245)
	at javafx.controls/javafx.scene.control.Alert.<init>(Alert.java:220)
	at MainPage.ioErrorAlert(MainPage.java:680)
	at ImportPreviewWindow.lambda$importBtnAction$7(ImportPreviewWindow.java:567)
	at java.base/java.lang.Thread.run(Thread.java:834)

CREATE TABLE `actions` (
  `User` varchar(50) NOT NULL,
  `Date` date NOT NULL,
  `Log` varchar(3000) DEFAULT NULL,
  CONSTRAINT `User_Date` PRIMARY KEY (`User`,`Date`),
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci

CREATE TABLE `products`.`useractions` (
  `User` varchar(50) NOT NULL,
  `Date` date NOT NULL,
  `Log` varchar(3000) DEFAULT NULL,
  CONSTRAINT `User_Date` PRIMARY KEY (`User`,`Date`));

  SET GLOBAL authentication_policy='mysql_native_password';














